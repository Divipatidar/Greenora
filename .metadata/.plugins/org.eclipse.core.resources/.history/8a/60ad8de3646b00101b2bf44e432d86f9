package com.cdac.service;

import java.time.LocalDateTime;

import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import com.cdac.custom_exception.ResourseNotFoundException;
import com.cdac.dao.OrderDao;
import com.cdac.dao.PaymentDao;
import com.cdac.dto.PaymentRequestDto;
import com.cdac.entities.DeliveryStatus;
import com.cdac.entities.Order;
import com.cdac.entities.Payment;
import com.cdac.entities.PaymentMethod;
import com.cdac.entities.PaymentStatus;

import jakarta.transaction.Transactional;
import lombok.AllArgsConstructor;



@Service
@Transactional
@AllArgsConstructor
public class PaymentServiceImpl implements PaymentService{

	
	private final ModelMapper modalmapper;
	private final OrderDao orderdao;
	private final   PaymentDao paymentdao;
	 
//	Order orderId, PaymentMethod method, PaymentStatus status, String transactionId, double amount,
//	LocalDateTime datetime)
	@Override
	public Payment processPayment(PaymentRequestDto dto) {
		
		Order order = orderdao.findById((long) dto.getOrderId()).orElseThrow(
				()-> new ResourseNotFoundException("invalid orderid id!!!"));
		
		PaymentMethod method = PaymentMethod.valueOf(dto.getMethod().toUpperCase());
		
		
		Payment payment = new Payment(order,method,PaymentStatus.COMPLETED,
				dto.getTransactionId(), dto.getAmount(), LocalDateTime.now());
		
		Payment savePayment = paymentdao.save(payment);
		 
		order.setDeliveryStatus(DeliveryStatus.PROCESSING);
		orderdao.save(order);
		return savePayment;
	}

	@Override
	public Payment getPaymentByOrderId(Long orderId) {
		Order order = orderdao.findById(orderId).orElseThrow(
				()-> new ResourseNotFoundException("invalid orderid id!!!"));
		return paymentdao.findByOrder(order).orElseThrow(
				()-> new ResourseNotFoundException("invalid orderid id!!!"));
	}

}
