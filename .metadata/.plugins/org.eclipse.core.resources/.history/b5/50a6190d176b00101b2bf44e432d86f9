package com.cdac.service;

import java.util.List;

import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import com.cdac.custom_exception.InvalidInputException;
import com.cdac.custom_exception.ResourseNotFoundException;
import com.cdac.dao.CategoryDao;
import com.cdac.dao.ProductDao;
import com.cdac.dto.ProductDto;
import com.cdac.entities.Category;
import com.cdac.entities.Product;

import jakarta.transaction.Transactional;
import lombok.AllArgsConstructor;


@Service
@Transactional
@AllArgsConstructor
public class ProductServiceImpl implements ProductService {

	private final ModelMapper modalmapper;
    private final ProductDao productdao;
    private final CategoryDao categorydao;
    
	
	@Override
	public Product addProduct(Long categoryID,ProductDto dto) {
		Category category = categorydao.findById(categoryID).orElseThrow(()->
	     new ResourseNotFoundException("invalid category!!!") );
		
		if(productdao.existsByCategoryIdAndName(categoryID, dto.getName())) {
			throw new InvalidInputException("same category and poroduct name alrdy exist!!");
		}
		
		
		
		Product product = modalmapper.map(dto, Product.class);
		category.addProduct(product);
		return product;
	}

	@Override
	public Product updateProduct(Long id, ProductDto dto) {
		if(productdao.existsByName(dto.getName())) {
			throw new InvalidInputException("duplicate product name!!");
		}
		Product product = productdao.findById(id).orElseThrow(()-> new
				ResourseNotFoundException("invalid product id!!!"));
		
		 modalmapper.map(dto,product);
		return product;
	}

	@Override
	public void deleteProduct(Long id) {
		Product product = productdao.findById(id).orElseThrow(()->
	     new ResourseNotFoundException("invalid product id!!!") );
		
		productdao.delete(product);
	}

	@Override
	public Product getProductById(Long id) {
		return productdao.findById(id).orElseThrow(()->
	     new ResourseNotFoundException("invalid category!!!") );
	}

	@Override
	public List<Product> getAllProducts() {
		List<Product> list = productdao.findAll();
		return list;
	}

	@Override
	public List<Product> getProductsByCategoryId(Long categoryId) {
		List<Product> list = productdao.findByCategoryId(categoryId);
		return list;
	}

	@Override
	public List<Product> searchProducts(String productName) {
		
		return productdao.findByName(productName);
	}

}
