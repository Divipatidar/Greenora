package com.cdac.service;

import java.time.LocalDate;
import java.util.List;

import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import com.cdac.custom_exception.ResourseNotFoundException;
import com.cdac.dao.CartDao;
import com.cdac.dao.CartItemDao;
import com.cdac.dao.CouponDao;
import com.cdac.dao.OrderDao;
import com.cdac.dao.OrderItemDao;
import com.cdac.dao.ProductDao;
import com.cdac.dao.UserDao;
import com.cdac.entities.Cart;
import com.cdac.entities.CartItem;
import com.cdac.entities.Coupon;
import com.cdac.entities.DeliveryStatus;
import com.cdac.entities.Order;
import com.cdac.entities.OrderItem;
import com.cdac.entities.Product;
import com.cdac.entities.User;

import jakarta.transaction.Transactional;
import lombok.AllArgsConstructor;


@Service
@Transactional
@AllArgsConstructor
public class OrderServiceimpl implements OrderService {
    
	private final ModelMapper modalmapper;
	private final OrderDao orderdao;
	private final OrderItemDao orderItemdao;
	private final UserDao userdao;
	private final CartDao cartdao;
	private final CartItemDao cartitemdao;
	private final ProductDao productdao;
	private final  CouponDao coupondao;
	
	@Override
	public Order placeOrder(Long userId, Long addressId, Long couponId) {
		User user = userdao.findById(userId).orElseThrow(
				   ()-> new ResourseNotFoundException("invalid user id!!!"));
		   Cart cart = cartdao.findByUserID(userId).orElseGet(
				   ()->cartdao.save(new Cart(user)));
		   
		   List<CartItem> list = cartitemdao.findByCartId(cart.getId());
		     if(list.isEmpty()) throw new ResourseNotFoundException("cart is empty");
		     
		     
		     double total = list.stream()
		                .mapToDouble(item -> item.getQuantity() * item.getPrice())
		                .sum();
		     
		     if (couponId != null) {
		            Coupon coupon = coupondao.findById(couponId)
		                    .orElseThrow(() -> new ResourseNotFoundException("Invalid coupon"));
		            if (total >= coupon.getMinOrderAmt() && coupon.isActive()) {
		                total -= coupon.getDiscountValue();
		            }
		        }
		   
		     Order order= new Order(total,LocalDate.now(),DeliveryStatus.PENDING, user);
		     Order order2 = orderdao.save(order);
		     
		     
		     for(CartItem item :  list) {
		    	 orderItemdao.save(new OrderItem(item.getQuantity(), 
		    			 total,item.getProduct(), order2));
		    	Product product = item.getProduct();
		    	product.setQuantity(product.getQuantity()-item.getQuantity());
		    	productdao.save(product);
		     }
		     
		     cartitemdao.deleteAll(list);
		return order2;
	}

	@Override
	public List<Order> getOrdersByUser(Long userId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Order getOrderById(Long orderId) {
		// TODO Auto-generated method stub
		return null;
	}

}
